// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String     @id @default(cuid())
    name          String?
    // if you are using Github OAuth, you can get rid of the username attribute (that is for Twitter OAuth)
    username      String?
    gh_username   String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    accounts      Account[]
    sessions      Session[]
    merchants     Merchant[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    refresh_token_expires_in Int?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Merchant {
    id               Int            @id @default(autoincrement())
    name             String?
    description      String?        @db.Text
    logo             String?
    image            String?        @db.Text
    subdomain        String?        @unique
    customDomain     String?        @unique
    createdAt        DateTime       @default(now()) @db.Timestamp(6)
    updatedAt        DateTime       @default(now()) @db.Timestamp(6)
    user             User?          @relation(fields: [userId], references: [id])
    userId           String?
    products         Product[]
    stripeCustomerId String?
    subscriptions    Subscription[]

    @@index([userId])
}

model Product {
    id          String    @id @default(cuid())
    title       String    @db.Text
    price       Float     @db.Float
    description String?   @db.Text
    image       String?   @db.Text
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    active      Boolean   @default(false)
    merchant    Merchant? @relation(fields: [merchantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    merchantId  Int?

    @@unique([id, merchantId], name: "product_merchant_constraint")
    @@index([merchantId])
}

model Subscription {
    id                 String    @id @default(cuid())
    stripeId           String?
    createdAt          DateTime  @default(now()) @db.Timestamp(6)
    updatedAt          DateTime  @default(now()) @db.Timestamp(6)
    status             String?
    currentPeriodStart DateTime
    currentPeriodEnd   DateTime
    merchant           Merchant? @relation(fields: [merchantId], references: [id])
    merchantId         Int?

    @@unique([id, merchantId], name: "subscription_merchant_constraint")
    @@index([merchantId])
}
